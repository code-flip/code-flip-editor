var Horrible=["#","CodeSkulptor","runs","Python","3","programs","in","your","browser.","#","Click","the","upper","left","button","to","run","this","simple","demo.","#","CodeSkulptor","runs","in","recent","versions","of","Chrome,","Firefox,","#","and","Safari.","Some","features","may","work","in","other","browsers,","#","but","do","not","expect","full","functionality.","#","It","does","NOT","run","in","Microsoft","Internet","Explorer","or","Edge.","import","simplegui","import","random","import","math","import","time","global","frameCounter","global","cost","global","benefit","global","GG,","WATCH_SPEED","GG","=","False","colors","=","[\"Yellow\",\"Blue\",\"Green\",\"Purple\",\"LAVENDER\",\"LIME\",\"WHEAT\"]","names","=","[\"Gullible\",\"TRAITORR\",\"Revenge\",\"Tit4Tat\",\"Tit42Tats\",","\"Random\",\"Rationer\"]","animations","=","[]","#[\"Color,radius,pos]","def","returnColor(num):","if","num","<=","len(colors):","return","colors[num-1]","else:","return","\"Black\"","def","dist(pos1,pos2):","return","math.sqrt(math.pow(pos1[0]-pos2[0],2)+math.pow(pos1[1]-pos2[1],2))","def","animate(canvas):","remove","=","[]","for","obj","in","animations:","canvas.draw_circle(obj[2],obj[1],1,obj[0])","obj[1]+=1","if","obj[1]",">","50:","remove.append(obj)","for","obj","in","remove:","animations.remove(obj)","class","individual():","def","__init__(self,gene,ID):","self.gene","=","gene","self.color","=","returnColor(self.gene)","self.history","=","[]","self.c","=","0","self.d","=","0","self.fitness","=","0","#interactions","self.pos","=","[]","self.pause","=","0","self.mustMove","=","0","while(True):","found","=","True","pos","=","[random.randint(0,WIDTH),random.randint(0,HEIGHT)]","'''for","i","in","range(0,population1.size):","if(dist(population1.group[i].pos,pos)<=30):","found","=","False'''","if","found:","self.pos","=","pos","break","self.ID","=","ID","self.vel","=","self.velocitySelect()","def","update(self):","global","frameCounter","#so","it","stays","on","screen","if","self.pause<=0:","self.pos[0]+=self.vel[0]*WATCH_SPEED","self.pos[1]+=self.vel[1]*WATCH_SPEED","if","frameCounter%math.ceil(MOVETIME/WATCH_SPEED)","==","0:","if","self.mustMove>0:","self.mustMove-=1","self.vel","=","self.velocitySelect()","if","self.pause>0:","self.pause-=1*WATCH_SPEED","def","velocitySelect(self):","while","True:","vel","=","[3*(random.random()-0.5),3*(random.random()-0.5)]","if","self.pos[0]+vel[0]*MOVETIME",">","0","and","self.pos[0]+vel[0]*MOVETIME","<","WIDTH","and","self.pos[1]+vel[1]*MOVETIME",">","0","and","self.pos[1]+vel[1]*MOVETIME<HEIGHT:","return","vel","def","strategy(self,opponent):","if","self.gene","==","1:","return","'C'","elif","self.gene","==","2:","return","'D'","elif","self.gene","==","3:","index","=","-1","for","meeting","in","opponent.history:","if","meeting[0]","==","self.ID","and","meeting[1]","==","'D':","return","'D'","return","'C'","elif","self.gene","==","4:","if","len(opponent.history)>0:","return","opponent.history[-1][1]","else:","return","'C'","elif","self.gene","==","5:","if","len(opponent.history)","<","2:","return","'C'","else:","if","opponent.history[-1][1]","==","'D'","and","opponent.history[-2][1]","==","'D':","return","'D'","else:","return","'C'","elif","self.gene","==","6:","return","random.choice(['C','D'])","elif","self.gene","==","7:","if","opponent.d",">","0:","if","opponent.c/opponent.d","<","benefit/cost:","return","'D'","else:","return","'C'","else:","return","'C'","def","draw(self,canvas):","rad","=","12","if","self.fitness",">","0:","rad+=math.log(self.fitness)","canvas.draw_circle(self.pos,rad,1,self.color,self.color)","class","population():","def","__init__(self):","self.group","=","[]","self.size","=","0","self.event","=","\"None\"","self.IDcount","=","0","self.speciesCount","=","[]","self.speciesFitness","=","[]","for","i","in","range(0,len(colors)):","self.speciesCount.append(0)","self.speciesFitness.append(0)","def","draw(self,canvas):","for","indv","in","self.group:","indv.draw(canvas)","def","birth(self,gene):","print(\"Birth","\"+str(self.IDcount))","self.group.append(individual(gene,self.IDcount))","self.IDcount+=1","animations.append([\"SPRINGGREEN\",12,self.group[len(self.group)-1].pos])","def","depBirth(self):","self.birth(self.group[random.randint(0,len(self.group)-1)].gene)","def","kill(self):","#random","index","=","random.randint(0,len(self.group)-1)","print","(\"Killed","+","str(self.group[index].ID))","animations.append([\"CRIMSON\",12,self.group[index].pos])","self.group.pop(index)","def","fitKill(self):","if","len(self.group)>0:","#weighted","random","index","=","-1","while(True):","index","=","random.randint(0,len(self.group)-1)","if","self.group[index].fitness","<","1:","break","else:","if","random.randint(0,self.group[index].fitness)","==","0:","break","animations.append([\"CRIMSON\",12,self.group[index].pos])","print","(\"Killed","+","str(self.group[index].ID))","self.group.pop(index)","def","eventGen(self):","pass","def","update(self):","global","frameCounter","self.size","=","len(self.group)","self.speciesCount","=","[]","self.speciesFitness","=","[]","for","i","in","range(0,len(colors)):","self.speciesCount.append(0)","self.speciesFitness.append(0)","for","indv","in","self.group:","self.speciesCount[indv.gene-1]+=1","self.speciesFitness[indv.gene-1]+=indv.fitness","for","i","in","range(0,len(self.group)-1):","for","j","in","range(i+1,len(self.group)):","if","self.group[i].mustMove","==","0","and","self.group[j].mustMove","==","0:","if","dist(self.group[i].pos,self.group[j].pos)<INTER_RANGE:","for","k","in","range(0,NUM_INTERACT):","self.interact(i,j)","for","indv","in","self.group:","indv.update()","frameCounter","+=","1","if","frameCounter%math.ceil(DEP_KILL_RATE/WATCH_SPEED)","==","0:","self.fitKill()","if","frameCounter%math.ceil(DEP_BIRTH_RATE/WATCH_SPEED)","==","0:","self.depBirth()","def","interact(self,x,y):","global","cost","global","benefit","self.group[x].mustMove","=","2","self.group[y].mustMove","=","2","self.group[x].pause","=","PAUSE","self.group[y].pause","=","PAUSE","valx","=","self.group[x].strategy(self.group[y])","valy","=","self.group[y].strategy(self.group[x])","#Mistakes!","Yay!","if","random.randint(0,MISTAKE_RATE)","==","1:","valx","=","random.choice(['C','D'])","if","random.randint(0,MISTAKE_RATE)","==","1:","valy","=","random.choice(['C','D'])","#Cost","and","benefits","here","if","valx","==","'C':","self.group[x].fitness","-=","cost","self.group[y].fitness","+=","benefit","self.group[x].history.append([self.group[y].ID,'C'])","self.group[x].c+=1","else:","self.group[x].history.append([self.group[y].ID,'D'])","self.group[x].d+=1","if","valy","==","'C':","self.group[y].fitness","-=","cost","self.group[x].fitness","+=","benefit","self.group[y].history.append([self.group[x].ID,'C'])","self.group[y].c+=1","else:","self.group[y].history.append([self.group[x].ID,'D'])","self.group[y].d+=1","#","Handler","to","draw","on","canvas","def","draw(canvas):","global","GG","global","frameCounter","if","not","GG:","DEP_KILL_RATE","=","math.ceil(200","*","(population1.size/MAX_POPULATION+1))","DEP_BIRTH_RATE","=","200*","(2-population1.size/MAX_POPULATION)","population1.update()","population1.draw(canvas)","animate(canvas)","for","i","in","range(0,len(colors)):","if","len(population1.group)","==","population1.speciesCount[i]:","GG","=","i+1","else:","if","GG","==","1:","canvas.draw_text(names[0]","+","\"s","WINS!","How","did","this","happen?!\",[100,100],20,\"White\")","elif","GG","==","2:","canvas.draw_text(names[1]","+","\"s","WINS!","Conclusion:","society","sucks\",[100,100],20,\"White\")","elif","GG","==","3:","canvas.draw_text(names[2]","+","\"s","WINS!","Revenge","is","always","the","solution\",[100,100],20,\"White\")","elif","GG","==","4:","canvas.draw_text(names[3]","+","\"s","WINS!","Predicted","outcome\",[100,100],20,\"White\")","elif","GG","==","5:","canvas.draw_text(names[4]","+","\"s","WINS!","Nicer","than","tit4tat\",[100,100],20,\"White\")","elif","GG","==","6:","canvas.draw_text(names[5]","+","\"s","WINS!","Random","is","ALWAYS","the","solution\",[100,100],20,\"White\")","elif","GG","==","7:","canvas.draw_text(names[6]","+","\"s","WINS!","Ratios!\",[100,100],20,\"White\")","elif","GG","==","8:","canvas.draw_text(names[7]","+","\"s","WINS!","This","is","impossible\",[100,100],20,\"White\")","for","i","in","range(0,len(speciesLabels)):","speciesLabels[i].set_text(names[i]+'","|","population:","'+str(population1.speciesCount[i])","+","'","fitness:","'+","str(population1.speciesFitness[i]))","def","event_handler(text):","try:","population1.event","=","text","except","Exception:","print(\"Not","a","valid","event","name\")","def","birth_handler(text):","try:","if","int(text)","<=","len(colors):","population1.birth(int(text))","except","Exception:","print(\"Not","a","valid","number\")","def","speed_handler(text):","global","WATCH_SPEED","try:","print(\"Watch","Speed:","\"+str(WATCH_SPEED))","WATCH_SPEED","=","float(text)","except","Exception:","pass","#","Create","a","frame","and","assign","callbacks","to","event","handlers","population1","=","population()","frameCounter","=","0","cost","=","1","benefit","=","2","MOVETIME","=","60","PAUSE","=","30","INTER_RANGE","=","30","KILL_RATE","=","float('inf')","DEP_KILL_RATE","=","200","BIRTH_RATE","=","float('inf')","DEP_BIRTH_RATE","=","float('inf')","MAX_POPULATION","=","100","NUM_INTERACT","=","10","MISTAKE_RATE","=","200","WATCH_SPEED","=","1","WIDTH","=","600","HEIGHT","=","500","frame","=","simplegui.create_frame(\"Evolution","Simulator\",","WIDTH,","HEIGHT)","eventInput","=","frame.add_input('Event',","event_handler,","150)","birthInput","=","frame.add_input('Birth',","birth_handler,","150)","speedInput","=","frame.add_input('Speed',","speed_handler,","150)","speciesLabels","=","[]","def","init(x):","for","i","in","range(0,len(colors)):","inLabel","=","frame.add_label(names[i]","+","'","|","population:","'+str(population1.speciesCount[i])","+","'","fitness:","'+","str(population1.speciesFitness[i]))","speciesLabels.append(inLabel)","for","i","in","range(0,x):","for","j","in","range(1,8):","population1.birth(j)","init(5)","frame.set_draw_handler(draw)","#","Start","the","frame","animation","frame.start()"];
export {Horrible};
